var dataCache = 'swDataConn-v1.0.0';
var shellCache = 'swShellConn-v1.0.0';
var filesToCache = [];
var filesToCacheAfter = [];

self.addEventListener('install', function (e) {
    console.log('SW Install');
    e.waitUntil(
        caches.open(shellCache).then(function (cache) {
            console.log('SW SHELL Install');
            return cache.addAll(filesToCache);
        })
    );
    caches.open(dataCache).then(function (cache) {
        console.log('SW DATA Install');
        cache.addAll(filesToCacheAfter);
    });
});

self.addEventListener('activate', function (e) {
    console.log('SW Activate');
    e.waitUntil(
        caches.keys().then(function (keyList) {
            return Promise.all(keyList.map(function (key) {
                if (key !== shellCache && key !== dataCache) {
                    console.log('SW Removing old cache', key);
                    return caches.delete(key);
                }
            }));
        })
    );
    return self.clients.claim();
});

self.addEventListener('fetch', function (e) {
    console.log('SW Fetch', e.request.url);

    let patt = new RegExp(/\.(((css|js)\?v=)|mst|png|jpg|ico|gif|jpeg|svg)/);
    if (patt.test(e.request.url)) {
        //SHELL GET CACHE OR ONLINE
        e.respondWith(
            caches.open(shellCache).then(function (cache) {
                return cache.match(e.request).then(function (response) {
                    var fetchPromise = fetch(e.request).then(function (networkResponse) {
                        if(!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic')
                            return networkResponse;

                        cache.put(e.request, networkResponse.clone());
                        return networkResponse;
                    });
                    return response || fetchPromise;
                })
            })
        );
    } else {
        //DATA GET CACHE AND UPDATE CACHE AFTER
        e.respondWith(
            caches.open(dataCache).then(function (cache) {
                return cache.match(e.request).then(function (response) {
                    var fetchPromise = fetch(e.request).then(function (networkResponse) {
                        if(!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic')
                            return networkResponse;

                        cache.put(e.request, networkResponse.clone());
                        return networkResponse;
                    });
                    return response || fetchPromise;
                })
            })
        );
    }
});